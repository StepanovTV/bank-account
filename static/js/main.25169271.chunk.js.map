{"version":3,"sources":["components/Dashbobrd/Dashbobrd.styles.js","components/Controls/Controls.styles.js","components/Controls/index.js","components/Controls/Controls.jsx","components/Balance/Balance.styles.js","components/Balance/index.js","components/Balance/Balance.jsx","components/TransactionHistory/TransactionHistory.styles.js","components/TransactionHistory/index.js","components/TransactionHistory/TransactionHistory.jsx","components/Dashbobrd/Dashbobrd.jsx","components/Dashbobrd/index.js","components/App.js","index.js"],"names":["DashbobrdWrapper","styled","div","ControlsWrapper","header","WraperFlex","ControlsInput","input","props","err","ControlBtn","button","Controls","value","hendelChenge","onDeposit","onWithdrawal","error","className","onChange","target","step","type","placeholder","onClick","BalanceWrapper","section","BalanceContent","Icon","span","color","CellBalanse","Balance","depositBalance","withdrawalBalance","TransactionHistoryWrapper","TableTransaction","table","TransactionHistory","transactionList","map","ele","key","id","amount","date","toast","configure","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","draggable","pauseOnHover","rules","transactionAmount","messages","integer","accepted","above","dataNow","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hoasjd","getHours","minijs","getMinutes","Dashbobrd","TransactionType","DEPOSIT","WITHDRAWAL","state","hasError","calculateTransactionBalance","resultDeposit","reduce","acum","ob","resultWithdrawal","setState","val","Number","pushNewTranzaction","transactionType","validate","then","prevState","createsTransactionObject","catch","message","finally","shortId","historyTransaction","localStorage","getItem","e","this","JSON","parse","prevProps","setItem","stringify","Error","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25169271.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const DashbobrdWrapper = styled.div`\n  display: block;\n`;\n\nexport const Teset = styled.div`\n  display: flex;\n`;\n","import styled from 'styled-components';\n\nexport const ControlsWrapper = styled.header`\n  display: block;\n  background-color: #03258c;\n  color: #d9d8d7;\n`;\n\nexport const WraperFlex = styled.div`\n  display: flex;\n  justify-content: center;\n  height: 110px;\n  align-items: center;\n`;\n\nexport const ControlsInput = styled.input`\n  height: 40px;\n  width: 250px;\n  border: ${props => (!props.err ? '2px solid #233d8c;' : '2px solid #f00;')};\n  border-radius: 8px;\n  margin-right: 30px;\n  padding: 5px 15px;\n\n  :focus {\n    border: 2px solid #bfa836;\n    outline: none;\n  }\n`;\n\nexport const ControlBtn = styled.button`\n  height: 40px;\n  width: 150px;\n  border: 2px solid #233d8c;\n  border-radius: 8px;\n  margin-right: 30px;\n  background-color: #233d8c;\n  text-transform: uppercase;\n  color: #fff;\n  font-weight: 400;\n\n  :hover,\n  :focus {\n    border: 2px solid #bfa836;\n    background-color: #bfa836;\n    color: #233d8c;\n    outline: none;\n  }\n`;\n","import Controls from './Controls';\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ControlsWrapper,\n  WraperFlex,\n  ControlsInput,\n  ControlBtn,\n} from './Controls.styles';\n\nconst Controls = ({ value, hendelChenge, onDeposit, onWithdrawal, error }) => {\n  return (\n    <ControlsWrapper>\n      <div className=\"container\">\n        <WraperFlex>\n          <ControlsInput\n            err={error}\n            value={value === 0 ? '' : value}\n            onChange={({ target }) => hendelChenge(target.value)}\n            step=\"10\"\n            type=\"number\"\n            placeholder=\"Сумма транзакции...\"\n          />\n          <ControlBtn onClick={onDeposit} type=\"button\">\n            Deposit\n          </ControlBtn>\n          <ControlBtn onClick={onWithdrawal} type=\"button\">\n            Withdraw\n          </ControlBtn>\n        </WraperFlex>\n      </div>\n    </ControlsWrapper>\n  );\n};\n\nControls.propTypes = {\n  value: PropTypes.number.isRequired,\n  hendelChenge: PropTypes.func.isRequired,\n  onDeposit: PropTypes.func.isRequired,\n  onWithdrawal: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired,\n};\n\nexport default Controls;\n","import styled from 'styled-components';\n\nexport const BalanceWrapper = styled.section`\n  display: blok;\n`;\n\nexport const BalanceContent = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 60px;\n  font-size: 1.2rem;\n`;\n\nexport const Icon = styled.span`\n  color: ${props => (props.color ? props.color : 'red')};\n`;\n\nexport const CellBalanse = styled.span`\n  margin: auto 15px;\n`;\n","import Balance from './Balance';\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BalanceWrapper,\n  BalanceContent,\n  CellBalanse,\n  Icon,\n} from './Balance.styles';\n\nconst Balance = ({ depositBalance, withdrawalBalance }) => {\n  return (\n    <BalanceWrapper>\n      <div className=\"container\">\n        <BalanceContent>\n          <p>\n            <CellBalanse>\n              <Icon color=\"green\"> ⬆ </Icon> {depositBalance}$\n            </CellBalanse>\n            <CellBalanse>\n              <Icon> ⬇ </Icon> {withdrawalBalance}$\n            </CellBalanse>\n            <CellBalanse>\n              Balance: <strong>{depositBalance - withdrawalBalance}</strong>$\n            </CellBalanse>\n          </p>\n        </BalanceContent>\n      </div>\n    </BalanceWrapper>\n  );\n};\n\nBalance.propTypes = {\n  depositBalance: PropTypes.number.isRequired,\n  withdrawalBalance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import styled from 'styled-components';\n\nexport const TransactionHistoryWrapper = styled.section`\n  display: blok;\n`;\n\nexport const TableTransaction = styled.table`\n  margin: 0 0 40px 0;\n  text-align: center;\n  width: 100%;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n\n  & thead {\n    background-color: #03258c;\n    color: white;\n  }\n\n  & th,\n  & td {\n    padding: 10px;\n  }\n\n  & tr:nth-child(even) {\n    background: #eee;\n  }\n\n  & thead tr {\n    background-color: #03258c;\n  }\n`;\n","import TransactionHistory from './TransactionHistory';\n\nexport default TransactionHistory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TransactionHistoryWrapper,\n  TableTransaction,\n} from './TransactionHistory.styles';\n\nconst TransactionHistory = ({ transactionList }) => {\n  return (\n    <TransactionHistoryWrapper>\n      <div className=\"container\">\n        <TableTransaction>\n          <thead>\n            <tr>\n              <th>Transaction</th>\n              <th>Amount</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {transactionList.map(ele => (\n              <tr key={ele.id}>\n                <td>{ele.type}</td>\n                <td>{ele.amount}$</td>\n                <td>{ele.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </TableTransaction>\n      </div>\n    </TransactionHistoryWrapper>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactionList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport shortId from 'shortid';\nimport { validate } from 'indicative/validator';\nimport { toast } from 'react-toastify';\nimport { DashbobrdWrapper } from './Dashbobrd.styles';\nimport Controls from '../Controls';\nimport Balance from '../Balance';\nimport TransactionHistory from '../TransactionHistory';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure({\n  position: 'bottom-right',\n  autoClose: 5000,\n  hideProgressBar: false,\n  newestOnTop: false,\n  closeOnClick: true,\n  rtl: false,\n  draggable: true,\n  pauseOnHover: false,\n});\n\nconst rules = {\n  transactionAmount: 'integer|accepted|above:9',\n};\n\nconst messages = {\n  integer: 'Должно бытьцелым числом',\n  accepted: 'Введите сумму для проведения операции!',\n  above: 'Cумма должна быть положительной и не меннее 10',\n};\n\nconst dataNow = function dataNow() {\n  const date = new Date();\n  const day = date.getDate();\n  const monthIndex = date.getMonth() + 1;\n  const year = date.getFullYear();\n  const hoasjd = date.getHours();\n  const minijs = date.getMinutes();\n\n  return `${day}/${monthIndex}/${year} ${hoasjd}:${minijs}`;\n};\n\nclass Dashbobrd extends Component {\n  TransactionType = {\n    DEPOSIT: 'deposit',\n    WITHDRAWAL: 'withdrawal',\n  };\n\n  state = {\n    transactionList: [],\n    transactionAmount: 0,\n    depositBalance: 0,\n    withdrawalBalance: 0,\n    hasError: '',\n  };\n\n  componentDidMount() {\n    let historyTransaction;\n    try {\n      historyTransaction = localStorage.getItem('transactionList');\n    } catch (e) {\n      this.setState({ hasError: 'Unknown error localStorage' });\n    }\n    if (historyTransaction) {\n      this.setState({ transactionList: JSON.parse(historyTransaction) });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { transactionList, hasError } = this.state;\n    if (prevState.transactionList !== transactionList) {\n      try {\n        localStorage.setItem(\n          'transactionList',\n          JSON.stringify(transactionList),\n        );\n      } catch (e) {\n        throw new Error('Unknown error localStorage');\n      }\n      this.calculateTransactionBalance();\n    }\n    if (prevState.hasError !== hasError) {\n      toast.error(hasError);\n    }\n  }\n\n  calculateTransactionBalance = () => {\n    const { transactionList } = this.state;\n\n    const resultDeposit = transactionList.reduce((acum, ob) => {\n      const summ =\n        ob.type === this.TransactionType.DEPOSIT ? acum + ob.amount : acum;\n      return summ;\n    }, 0);\n\n    const resultWithdrawal = transactionList.reduce((acum, ob) => {\n      const summ =\n        ob.type === this.TransactionType.WITHDRAWAL ? acum + ob.amount : acum;\n      return summ;\n    }, 0);\n\n    this.setState({\n      depositBalance: resultDeposit,\n      withdrawalBalance: resultWithdrawal,\n    });\n  };\n\n  hendelChenge = val => {\n    this.setState({ transactionAmount: Number(val) });\n  };\n\n  pushNewTranzaction = transactionType => {\n    const { transactionAmount } = this.state;\n    validate({ transactionAmount }, rules, messages)\n      .then(() => {\n        this.setState(prevState => ({\n          transactionList: [\n            ...prevState.transactionList,\n            this.createsTransactionObject(transactionType),\n          ],\n          hasError: '',\n        }));\n      })\n      .catch(error => {\n        this.setState({ hasError: error[0].message });\n      })\n      .finally(() => this.setState({ transactionAmount: 0 }));\n  };\n\n  createsTransactionObject = transactionType => {\n    const { transactionAmount } = this.state;\n    return {\n      id: shortId(),\n      type: transactionType,\n      amount: transactionAmount,\n      date: dataNow(),\n    };\n  };\n\n  onDeposit = () => this.pushNewTranzaction(this.TransactionType.DEPOSIT);\n\n  onWithdrawal = () => {\n    const { transactionAmount, depositBalance, withdrawalBalance } = this.state;\n    if (transactionAmount - (depositBalance - withdrawalBalance) < 0) {\n      this.pushNewTranzaction(this.TransactionType.WITHDRAWAL);\n    } else {\n      this.setState({\n        hasError: 'На счету недостаточно средств для проведения операции!',\n      });\n    }\n  };\n\n  render() {\n    const {\n      transactionList,\n      transactionAmount,\n      depositBalance,\n      withdrawalBalance,\n      hasError,\n    } = this.state;\n    return (\n      <DashbobrdWrapper>\n        <Controls\n          value={transactionAmount}\n          hendelChenge={this.hendelChenge}\n          onDeposit={this.onDeposit}\n          onWithdrawal={this.onWithdrawal}\n          error={hasError}\n        />\n        <Balance\n          depositBalance={depositBalance}\n          withdrawalBalance={withdrawalBalance}\n        />\n        <TransactionHistory transactionList={transactionList} />\n      </DashbobrdWrapper>\n    );\n  }\n}\n\nexport default Dashbobrd;\n","import Dashbobrd from './Dashbobrd';\n\nexport default Dashbobrd;\n","import React from 'react';\nimport Dashbobrd from './Dashbobrd';\nimport './normalize.min.css';\n\nconst App = () => <Dashbobrd />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}